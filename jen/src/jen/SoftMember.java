/* SoftMember.java - Common superinterface for members
 *
 * Copyright (c)2005 Roscopeco Open Technologies & Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * File version: $Revision$ $Date$
 * Originated: 04-Sep-2005
 * Author: Ross Bamford (rosco<at>roscopeco.co.uk)
 */

package jen;

import org.objectweb.asm.ClassVisitor;

/**
 * Represents an individual member (either a class, method, or field) on a 
 * {@link SoftClass}. This is a common superinterface for the specific member types,
 * including {@link SoftClass} itself.
 * <p/>
 * In all cases, class and type names supplied to and by methods of this interface 
 * will be language names (i.e. <code>java.lang.String</code>) as opposed to 
 * internal (or binary) names (<code>java/lang/String</code>). Members may, 
 * however, provide implementation-dependent access to internal names and other 
 * low-level information <em>alongside</em> the standard <code>name</code> methods.
 * It is <em>recommended</em> that any such 'additional' API follow the naming 
 * convention of this class, replacing 'Name' with 'InternalName'.
 * <p/>
 * Members are responsible for checking the {@link SoftClass#canModify()} flag
 * before allowing any modification to take place. {@link AbstractSoftMember}
 * (from which {@link SoftClass} is descended) provides convenient 
 * {@link AbstractSoftMember#canModify()} and {@link AbstractSoftMember#checkModify()}
 * methods that automatically call through to the associated {@link SoftClass}. 
 *
 * @author Ross Bamford (rosco&lt;at&gt;roscopeco.co.uk)
 * @version $Revision$ $Date$
 */
public interface SoftMember
{
  /**
   * Retrieve the {@link SoftClass} to which this member belongs. Contractually
   * this is immutable, though implementations may allow it to be modified
   * <strong>only if they can transparently support such modification</strong>.
   * {@link SoftClass} (and any subclasses) <em>may</em> return <code>null</code>
   * from this method, though the presence or absence of that return is not 
   * indicative of the actual status of the class (i.e. nested or otherwise).
   * For all other member types, this method <em>must never</em> return 
   * <code>null</code>.
   * 
   * @return The {@link SoftClass} upon which this member is declared.
   */
  public SoftClass getSoftClass();

  /**
   * Retrieve the JVM access modifiers for this member. This is returned
   * as a bitmap, comprised of the various integer constants defined by
   * the JVM specification.
   * 
   * @return The access modifier bitmap.
   */
  public int getModifiers();

  /**
   * Retrieve the current name of this member.
   * 
   * @return The member name. 
   */
  public String getName();
  
  /**
   * Retrieve the generic signature for this member.
   * 
   * @return The generic signature.
   */
  public String getSignature();
  
  /**
   * Called during generation to cause events representing this member's
   * descriptor or bytecode to be generated to the specified visitor.
   * The member will cause an appropriate sequence of <code>visitXXXX</code>
   * calls to be made on <code>visitor</code>, either by passing it into
   * the <code>accept</code> methods of it's container members / nodes,
   * which will in turn call back to those methods, or by or by direct 
   * calls (possibly through an adapter such as
   * {@link org.objectweb.asm.GeneratorAdapter}), such as is the case with
   * generated methods.
   * 
   * @param visitor The {@link org.objectweb.asm.ClassVisitor} that will 
   *        consume the events generated by this member (the producer). 
   */
  public void accept(ClassVisitor visitor);
}