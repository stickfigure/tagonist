/* MethodFragment.java - Awaiting description
 *
 * Copyright (c)2005 Roscopeco Open Technologies & Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * File version: $Revision$ $Date$
 * Originated: Oct 17, 2005
 * Author: Ross Bamford (rosco<at>roscopeco.co.uk)
 */

package jen.methods;

import org.objectweb.asm.commons.GeneratorAdapter;

/** 
 * Generates a fragment of bytecode when called upon to do so. 
 * Implementations of this class are used by the {@link WrappedSoftMethod}
 * class to generate the required instructions before and after the method
 * call.
 * <p/>
 * It is impossible to guarantee that arbitrary fragments will operate 
 * correctly in any given context, or in combination. It is therefore 
 * important that fragments adhere to certain rules, which are given below:
 * <p/>
 * <ul>
 *    <li>Clearly define any at-entry stack-state requirements.</li>
 *    <p/>
 *    <li>Clearly define the stack-state at exit.</li>
 *    <p/>
 *    <li>If generating any of the {@code ATHROW} or {@code xRETURN}
 *    instructions, do so <strong>unconditionally</strong>, and clearly
 *    state this behaviour in any documentation.</li>
 *    <p/>
 *    <li><strong>Never</strong> generate any {@code JSR}, {@code JSR_W}
 *    or {@code RET} instruction.</li>
 *    <p/>
 *    <li><strong>Never</strong> leave the stack in a state that requires
 *    further action with specific operand knowledge, and which would otherwise
 *    prevent any backward branch being taken. The primary effect of this is
 *    to require that fragments that instantiate objects also call an appropriate
 *    constructor.</li>
 * </ul>
 * <p/>
 * Please note that the above guidelines are <em>advisory</em> and do not
 * form part of the contract of this class.
 *
 * @author Ross Bamford (rosco&lt;at&gt;roscopeco.co.uk)
 * @version $Revision$ $Date$ 
 */
public interface MethodFragment
{
  /**
   * Called to generate the instructions for this fragment.
   * The generated bytecode should conform to the restrictions
   * set out in the {@link MethodFragment class description}.
   * 
   * @param gen The {@link GeneratorAdapter} to which the instructions
   *        should be generated.
   */
  public void accept(GeneratorAdapter gen);
}
